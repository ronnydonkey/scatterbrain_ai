
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { insightId, reportData, originalInput, timestamp } = await req.json();

    console.log('Generating report for insight:', insightId);

    // Create a comprehensive text report since PDF generation requires additional libraries
    const textReport = `
SCATTERBRAINAI REPORT
${new Date().toLocaleDateString()}

=================================================================

ORIGINAL THOUGHT:
${originalInput}

=================================================================

EXECUTIVE SUMMARY:
${reportData.summary?.keyFindings?.map((finding, i) => `${i + 1}. ${finding}`).join('\n') || 'No key findings available'}

Confidence Level: ${reportData.summary?.confidence || 'Not specified'}
Time to Implement: ${reportData.summary?.timeToImplement || 'Not specified'}
Impact Level: ${reportData.summary?.impactLevel || 'Not specified'}

=================================================================

DETAILED ANALYSIS:
${reportData.analysis?.detailedBreakdown || 'No detailed analysis available'}

PATTERNS IDENTIFIED:
${reportData.analysis?.patterns?.map((pattern, i) => `â€¢ ${pattern}`).join('\n') || 'No patterns identified'}

RECOMMENDATIONS:
${reportData.analysis?.recommendations?.map((rec, i) => `${i + 1}. ${rec}`).join('\n') || 'No recommendations available'}

=================================================================

ACTION PLAN:

IMMEDIATE ACTIONS:
${reportData.actionPlan?.immediate?.map((action, i) => `${i + 1}. ${action}`).join('\n') || 'No immediate actions specified'}

SHORT TERM ACTIONS:
${reportData.actionPlan?.shortTerm?.map((action, i) => `${i + 1}. ${action}`).join('\n') || 'No short term actions specified'}

LONG TERM ACTIONS:
${reportData.actionPlan?.longTerm?.map((action, i) => `${i + 1}. ${action}`).join('\n') || 'No long term actions specified'}

=================================================================

CONTENT SUGGESTIONS:

${reportData.contentSuggestions?.socialPosts ? Object.entries(reportData.contentSuggestions.socialPosts).map(([platform, content]) => `
${platform.toUpperCase()}:
${content?.content || 'No content available'}
`).join('\n') : 'No content suggestions available'}

=================================================================

RESOURCES:

ARTICLES:
${reportData.resources?.articles?.map((article, i) => `${i + 1}. ${article.title}
   URL: ${article.url}
   Description: ${article.description || 'No description'}`).join('\n\n') || 'No articles available'}

TOOLS:
${reportData.resources?.tools?.map((tool, i) => `${i + 1}. ${tool.name}
   URL: ${tool.url}
   Description: ${tool.description || 'No description'}`).join('\n\n') || 'No tools available'}

=================================================================

Report generated by ScatterBrainAI
Visit: https://scatterbrainai.com
`;

    // Convert text to downloadable format
    const encoder = new TextEncoder();
    const data = encoder.encode(textReport);

    return new Response(JSON.stringify({
      success: true,
      pdfBuffer: Array.from(data),
      contentType: 'text/plain',
      filename: `scatterbrain-report-${insightId}.txt`
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Report generation failed:', error);
    return new Response(JSON.stringify({ 
      success: false, 
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
